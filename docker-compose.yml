name: caimel-stack
services:
  boilerplate:
    build:
      dockerfile: packages/features/nextjs/docker/dockerfile
    restart: unless-stopped
    user: 1000:1000
    ports:
      - "127.0.0.1:3044:3000"
    working_dir: /nextjs
    environment:
      APP_NAME: "boilerplate"
      PNPM_STORE_DIR: /home/node/.pnpm-store
      TURBO_TELEMETRY_DISABLED: "1"
      NEXT_TELEMETRY_DISABLED: "1"
      NODE_ENV: development
      WATCHPACK_POLLING: "true"
      WATCHPACK_POLLING_INTERVAL: "200"
      MINIO_HOST: ${MINIO_HOST}
      MINIO_PORT: "9001"
      MINIO_ACCESS_KEY: ${RANDOM_USERNAME}
      MINIO_SECRET_KEY: ${STRONG_PASSWORD}
      MINIO_NOTIFY_WEBHOOK_AUTH_TOKEN_NEXTJS: ${STRONG_PASSWORD}
      MINIO_NOTIFY_WEBHOOK_ENDPOINT: https://boilerplate-nextjs-3afb6505.christiangotthardt.de/api/minio-webhook
      CI: "true"
      ADMIN_USERNAME: ${RANDOM_USERNAME}
      ADMIN_PASSWORD: ${STRONG_PASSWORD}
      OPENAI_API_KEY: ${OPENAI_API_KEY}

    volumes:
      - ./:/nextjs:rw
      - volume_boilerplate_pnpm_store:/home/node/.pnpm-store:rw
    command: ["pnpm", "turbo", "run", "dev", "--filter=boilerplate"]
    networks:
      - proxy
      - caimel-stack
    healthcheck:
      test: ["CMD", "true"]

  boilerplate2:
    build:
      dockerfile: packages/features/nextjs/docker/dockerfile
    restart: unless-stopped
    user: 1000:1000
    ports:
      - "127.0.0.1:3045:3000"
    working_dir: /nextjs
    environment:
      APP_NAME: "boilerplate2"
      PNPM_STORE_DIR: /home/node/.pnpm-store
      TURBO_TELEMETRY_DISABLED: "1"
      NEXT_TELEMETRY_DISABLED: "1"
      NODE_ENV: development
      WATCHPACK_POLLING: "true"
      WATCHPACK_POLLING_INTERVAL: "200"
      RATE_LIMITER_HOST: ${RATE_LIMITER_HOST}
      CI: "true"
      ADMIN_USERNAME: ${RANDOM_USERNAME}
      ADMIN_PASSWORD: ${STRONG_PASSWORD}
      OPENAI_API_KEY: ${OPENAI_API_KEY}

    volumes:
      - ./:/nextjs:rw
      - volume_boilerplate2_pnpm_store:/home/node/.pnpm-store:rw
    command: ["pnpm", "turbo", "run", "dev", "--filter=boilerplate2"]
    networks:
      - proxy
      - caimel-stack
    healthcheck:
      test: ["CMD", "true"]

  redis-ratelimiter:
    build:
      context: ./infrastructure/redis-ratelimiter
      dockerfile: docker/Dockerfile
    restart: unless-stopped
    ports:
      - "127.0.0.1:8088:8000"
    environment:
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${STRONG_PASSWORD}
      - NAMESPACE_PREFIX="ratelimit:"
      - PORT=8000
    networks:
      - caimel-stack
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "test_ratelimit.py", "--health-check-only"]
      interval: 30s
      timeout: 25s
      retries: 3
      start_period: 15s

  redis-ratelimiter2:
    build:
      context: ./infrastructure/redis-ratelimiter
      dockerfile: docker/Dockerfile
    restart: unless-stopped
    ports:
      - "127.0.0.1:8089:8001"
    environment:
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${STRONG_PASSWORD}
      - NAMESPACE_PREFIX="ratelimit:"
      - PORT=8001
    networks:
      - caimel-stack
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "test_ratelimit.py", "--health-check-only"]
      interval: 30s
      timeout: 25s
      retries: 3
      start_period: 15s

  ratelimiter:
    container_name: ratelimiter
    build:
      context: ./infrastructure/ratelimiter
      dockerfile: docker/Dockerfile
    restart: unless-stopped
    ports:
      - "127.0.0.1:8099:8099"
    environment:
      - PORT=8099
    networks:
      - caimel-stack
    healthcheck:
      test: ["CMD", "python", "test_ratelimit.py", "--health-check-only"]
      interval: 30s
      timeout: 25s
      retries: 3
      start_period: 15s

  redis:
    image: redis:latest
    restart: unless-stopped
    environment:
      - REDIS_PASSWORD=${STRONG_PASSWORD}
    command: ["--requirepass", "${STRONG_PASSWORD}"]
    volumes:
      - volume_redis_db:/data
    networks:
      - caimel-stack
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a ${STRONG_PASSWORD} ping | grep -q PONG"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 10s
  minio:
    image: minio/minio:latest
    restart: unless-stopped
    ports:
      - "127.0.0.1:9001:9001"
    environment:
      - MINIO_ROOT_USER: ${RANDOM_USERNAME}
      - MINIO_ROOT_PASSWORD: ${STRONG_PASSWORD}
      - MINIO_NOTIFY_WEBHOOK_ENABLE_NEXTJS: "on"
      - MINIO_NOTIFY_WEBHOOK_ENDPOINT_NEXTJS: "http://boilerplate:3000/api/minio-webhook"
      - MINIO_NOTIFY_WEBHOOK_AUTH_TOKEN_NEXTJS: ${STRONG_PASSWORD}
    command: ["server", "/data", "--console-address", ":9001"]
    volumes:
      - volume_minio_data:/data
    networks:
      - caimel-stack
      - proxy
    depends_on:
      nextjs:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 15s

networks:
  proxy:
    external: true
  caimel-stack:
    external: true

volumes:
  volume_boilerplate_pnpm_store:
  volume_boilerplate2_pnpm_store:
  volume_redis_db:
  volume_minio_data:
