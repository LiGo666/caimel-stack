name: caimel-stack
services:
   nextjs:
      build:
         dockerfile: Dockerfile
      restart: unless-stopped
      user: 1000:1000
      ports:
         - "127.0.0.1:3034:3000"
      working_dir: /nextjs
      environment:
         NODE_ENV: development
         WATCHPACK_POLLING: "true"
         WATCHPACK_POLLING_INTERVAL: "200"
         NEXT_TELEMETRY_DISABLED: "1"
         CI: "true"
         PNPM_STORE_DIR: /home/node/.pnpm-store
         ADMIN_USERNAME: ${RANDOM_USERNAME}
         ADMIN_PASSWORD: ${STRONG_PASSWORD}
         TURNSTILE_SECRET_KEY: ${TURNSTILE_SECRET_KEY}
         NEXT_PUBLIC_TURNSTILE_SITE_KEY: ${TURNSTILE_SITE_KEY}
         REDIS_HOSTNAME: redis
         REDIS_PASSWORD: ${STRONG_PASSWORD}
         NEXTAUTH_URL: https://boilerplate-nextjs-3afb6505.christiangotthardt.de
         NEXTAUTH_TRUST_HOST: true
         NEXTAUTH_SECRET: ${STRONG_PASSWORD}
         POSTGRES_DATABASE_URL: postgres://${RANDOM_USERNAME}:${STRONG_PASSWORD}@postgres:5432/nextjs-db
         OPENAI_API_KEY: ${OPENAI_API_KEY}
         NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY}
         CLERK_SECRET_KEY: ${CLERK_SECRET_KEY}
         MINIO_ENDPOINT: minio:9000
         MINIO_ACCESS_KEY: ${RANDOM_USERNAME}
         MINIO_SECRET_KEY: ${STRONG_PASSWORD}
         HUGGINGFACE_TOKEN: ${HUGGINGFACE_TOKEN}
      volumes:
         - ./:/nextjs:rw
         - volume_nextjs_pnpm_store:/home/node/.pnpm-store:rw
      command: ["pnpm", "dev", "--port", "3000", "--hostname", "0.0.0.0"]
      networks:
         - proxy
         - caimel-stack
      depends_on:
         postgres:
            condition: service_healthy
         redis:
            condition: service_healthy
         adminer:
            condition: service_started
         redis-commander:
            condition: service_started

   redis:
      image: redis:latest
      restart: unless-stopped
      environment:
         - REDIS_PASSWORD=${STRONG_PASSWORD}
      command: ["--requirepass", "${STRONG_PASSWORD}"]
      volumes:
         - volume_redis_db:/data
      networks:
         - caimel-stack
      healthcheck:
         test: ["CMD-SHELL", "redis-cli -a ${STRONG_PASSWORD} ping | grep -q PONG"]
         interval: 30s
         timeout: 10s
         retries: 3
         start_period: 10s

   postgres:
      image: pgvector/pgvector:pg15
      restart: unless-stopped
      environment:
         - POSTGRES_USER=${RANDOM_USERNAME}
         - POSTGRES_PASSWORD=${STRONG_PASSWORD}
         - POSTGRES_DB=defaultdb
      volumes:
         - volume_postgres_db:/var/lib/postgresql/data
      networks:
         - caimel-stack
      healthcheck:
         test: ["CMD-SHELL", "pg_isready"]
         interval: 30s
         timeout: 10s
         retries: 3
         start_period: 40s

   redis-commander:
      image: rediscommander/redis-commander:latest
      restart: unless-stopped
      ports:
         - "127.0.0.1:9911:9911"
      command: ["sh", "-c", "node ./bin/redis-commander --port 9911 --redis-host redis --redis-password ${STRONG_PASSWORD}"]
      networks:
         - caimel-stack
      healthcheck:
         test: ["CMD", "true"]

   adminer:
      image: adminer
      restart: unless-stopped
      ports:
         - "127.0.0.1:9912:8080"
      networks:
         - caimel-stack
      healthcheck:
         test: ["CMD", "true"]

   # MinIO Object Storage for audio files, models, and artifacts
   minio:
      image: minio/minio:latest
      restart: unless-stopped
      ports:
         - "127.0.0.1:9000:9000"
         - "127.0.0.1:9001:9001"
      environment:
         MINIO_ROOT_USER: ${RANDOM_USERNAME}
         MINIO_ROOT_PASSWORD: ${STRONG_PASSWORD}
         MINIO_CONSOLE_ADDRESS: ":9001"
      volumes:
         - volume_minio_data:/data
      command: server /data --console-address ":9001"
      networks:
         - caimel-stack
      healthcheck:
         test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
         interval: 30s
         timeout: 20s
         retries: 3

   # ASR Worker for WhisperX transcription and alignment
   asr-worker:
      build:
         context: .
         dockerfile: workers/asr/Dockerfile
      restart: unless-stopped
      environment:
         REDIS_HOSTNAME: redis
         REDIS_PASSWORD: ${STRONG_PASSWORD}
         MINIO_ENDPOINT: minio:9000
         MINIO_ACCESS_KEY: ${RANDOM_USERNAME}
         MINIO_SECRET_KEY: ${STRONG_PASSWORD}
         POSTGRES_DATABASE_URL: postgres://${RANDOM_USERNAME}:${STRONG_PASSWORD}@postgres:5432/nextjs-db
      volumes:
         - volume_models_cache:/models
         - /tmp:/tmp
      networks:
         - caimel-stack
      depends_on:
         - redis
         - minio
         - postgres
      deploy:
         resources:
           reservations:
             devices:
               - driver: nvidia
                 count: 1
                 capabilities: [gpu]

   # Diarization Worker for speaker separation and clustering
   diarization-worker:
      build:
         context: .
         dockerfile: workers/diarization/Dockerfile
      restart: unless-stopped
      environment:
         REDIS_HOSTNAME: redis
         REDIS_PASSWORD: ${STRONG_PASSWORD}
         MINIO_ENDPOINT: minio:9000
         MINIO_ACCESS_KEY: ${RANDOM_USERNAME}
         MINIO_SECRET_KEY: ${STRONG_PASSWORD}
         POSTGRES_DATABASE_URL: postgres://${RANDOM_USERNAME}:${STRONG_PASSWORD}@postgres:5432/nextjs-db
      volumes:
         - volume_models_cache:/models
         - /tmp:/tmp
      networks:
         - caimel-stack
      depends_on:
         - redis
         - minio
         - postgres
      deploy:
         resources:
           reservations:
             devices:
               - driver: nvidia
                 count: 1
                 capabilities: [gpu]

   # TTS Worker for voice cloning and synthesis
   tts-worker:
      build:
         context: .
         dockerfile: workers/tts/Dockerfile
      restart: unless-stopped
      environment:
         REDIS_HOSTNAME: redis
         REDIS_PASSWORD: ${STRONG_PASSWORD}
         MINIO_ENDPOINT: minio:9000
         MINIO_ACCESS_KEY: ${RANDOM_USERNAME}
         MINIO_SECRET_KEY: ${STRONG_PASSWORD}
         POSTGRES_DATABASE_URL: postgres://${RANDOM_USERNAME}:${STRONG_PASSWORD}@postgres:5432/nextjs-db
      volumes:
         - volume_models_cache:/models
         - /tmp:/tmp
      networks:
         - caimel-stack
      depends_on:
         - redis
         - minio
         - postgres
      deploy:
         resources:
           reservations:
             devices:
               - driver: nvidia
                 count: 1
                 capabilities: [gpu]

   # Prometheus for metrics collection
   prometheus:
      image: prom/prometheus:latest
      restart: unless-stopped
      ports:
         - "127.0.0.1:9090:9090"
      volumes:
         - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
         - volume_prometheus_data:/prometheus
      command:
         - '--config.file=/etc/prometheus/prometheus.yml'
         - '--storage.tsdb.path=/prometheus'
         - '--web.console.libraries=/etc/prometheus/console_libraries'
         - '--web.console.templates=/etc/prometheus/consoles'
      networks:
         - caimel-stack

   # Grafana for metrics visualization
   grafana:
      image: grafana/grafana:latest
      restart: unless-stopped
      ports:
         - "127.0.0.1:3002:3000"
      environment:
         GF_SECURITY_ADMIN_USER: ${RANDOM_USERNAME}
         GF_SECURITY_ADMIN_PASSWORD: ${STRONG_PASSWORD}
      volumes:
         - volume_grafana_data:/var/lib/grafana
      networks:
         - caimel-stack

networks:
   proxy:
      external: true
   caimel-stack:
      external: true

volumes:
   volume_nextjs_pnpm_store:
   volume_redis_db:
   volume_postgres_db:
   volume_minio_data:
   volume_models_cache:
   volume_prometheus_data:
   volume_grafana_data:
