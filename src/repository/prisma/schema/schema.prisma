// Prisma schema for basic test table
// Location: src/features/prisma/schema/schema.prisma
// Generator outputs the client to src/features/prisma/generated

generator client {
  provider = "prisma-client-js"
  output   = "../generated"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_DATABASE_URL")
}

model User {
  id               String         @id @default(cuid())
  email            String         @unique
  name             String?
  password         String?
  image            String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  
  // File upload relationships
  uploadGroups     UploadGroup[]
  uploadSessions   UploadSession[]
}

// File Upload Lifecycle Tracking
enum FileStatus {
  PENDING_UPLOAD    // Presigned URL generated, waiting for upload
  UPLOADING        // Multipart upload in progress
  UPLOADED         // File successfully uploaded to MinIO
  PROCESSING       // File is being processed
  COMPLETED        // All processing completed
  FAILED           // Upload or processing failed
  DELETED          // File was deleted
}

enum JobStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum JobType {
  TRANSCRIPTION
  THUMBNAIL_GENERATION
  VIRUS_SCAN
  CONTENT_ANALYSIS
  COMPRESSION
}

enum GroupStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
}

enum PartStatus {
  PENDING
  UPLOADING
  UPLOADED
  FAILED
}

model UploadGroup {
  id              String        @id @default(cuid())
  name            String
  description     String?
  userId          String?       // Optional: link to user if authenticated
  user            User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  status          GroupStatus   @default(PENDING)
  totalFiles      Int           @default(0)
  completedFiles  Int           @default(0)
  
  // Related upload sessions
  sessions        UploadSession[]
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  @@map("upload_groups")
}

model UploadSession {
  id            String   @id @default(cuid())
  groupId       String?  // Optional: link to upload group
  group         UploadGroup? @relation(fields: [groupId], references: [id], onDelete: SetNull)
  userId        String?  // Optional: link to user if authenticated
  user          User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  // MinIO reference - only store essential identifiers
  objectKey     String   @unique // The object key in MinIO (contains all file info)
  uploadId      String?  // For multipart uploads
  
  status        FileStatus @default(PENDING_UPLOAD)
  uploadedAt    DateTime?
  
  // Multipart upload tracking
  totalParts      Int?      // Total number of parts for multipart uploads
  completedParts  Int?      // Number of completed parts
  parts           FilePart[] // Individual parts for multipart uploads
  
  // Processing jobs
  jobs          ProcessingJob[]
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("upload_sessions")
}

model FilePart {
  id          String      @id @default(cuid())
  sessionId   String
  session     UploadSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  partNumber  Int         // Part number in the multipart upload (1-based)
  etag        String?     // Entity tag returned by MinIO after part upload
  size        Int         // Size of the part in bytes
  status      PartStatus  @default(PENDING)
  uploadedAt  DateTime?
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@map("file_parts")
  @@unique([sessionId, partNumber]) // Ensure unique part numbers per session
  @@index([sessionId, status])
}

model ProcessingJob {
  id            String    @id @default(cuid())
  uploadSession UploadSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId     String
  
  type          JobType
  status        JobStatus @default(PENDING)
  priority      Int       @default(5) // 1 = highest, 10 = lowest
  
  // Job configuration and results
  config        Json?     // Job-specific configuration
  result        Json?     // Store job results
  error         String?   // Error message if failed
  
  // Execution tracking
  startedAt     DateTime?
  completedAt   DateTime?
  attempts      Int       @default(0)
  maxAttempts   Int       @default(3)
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@map("processing_jobs")
  @@index([status, priority, createdAt])
  @@index([type, status])
}

model Path {
  id               String         @id @default(cuid())
  path             String         @unique
  passphrases      String[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}
